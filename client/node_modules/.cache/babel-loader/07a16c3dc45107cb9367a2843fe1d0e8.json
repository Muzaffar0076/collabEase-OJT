{"ast":null,"code":"import { Transport } from \"../transport.js\";\nimport { randomString } from \"../util.js\";\nimport { encodePayload, decodePayload } from \"engine.io-parser\";\nexport class Polling extends Transport {\n  constructor() {\n    super(...arguments);\n    this._polling = false;\n  }\n\n  get name() {\n    return \"polling\";\n  }\n  /**\n   * Opens the socket (triggers polling). We write a PING message to determine\n   * when the transport is open.\n   *\n   * @protected\n   */\n\n\n  doOpen() {\n    this._poll();\n  }\n  /**\n   * Pauses polling.\n   *\n   * @param {Function} onPause - callback upon buffers are flushed and transport is paused\n   * @package\n   */\n\n\n  pause(onPause) {\n    this.readyState = \"pausing\";\n\n    const pause = () => {\n      this.readyState = \"paused\";\n      onPause();\n    };\n\n    if (this._polling || !this.writable) {\n      let total = 0;\n\n      if (this._polling) {\n        total++;\n        this.once(\"pollComplete\", function () {\n          --total || pause();\n        });\n      }\n\n      if (!this.writable) {\n        total++;\n        this.once(\"drain\", function () {\n          --total || pause();\n        });\n      }\n    } else {\n      pause();\n    }\n  }\n  /**\n   * Starts polling cycle.\n   *\n   * @private\n   */\n\n\n  _poll() {\n    this._polling = true;\n    this.doPoll();\n    this.emitReserved(\"poll\");\n  }\n  /**\n   * Overloads onData to detect payloads.\n   *\n   * @protected\n   */\n\n\n  onData(data) {\n    const callback = packet => {\n      // if its the first message we consider the transport open\n      if (\"opening\" === this.readyState && packet.type === \"open\") {\n        this.onOpen();\n      } // if its a close packet, we close the ongoing requests\n\n\n      if (\"close\" === packet.type) {\n        this.onClose({\n          description: \"transport closed by the server\"\n        });\n        return false;\n      } // otherwise bypass onData and handle the message\n\n\n      this.onPacket(packet);\n    }; // decode payload\n\n\n    decodePayload(data, this.socket.binaryType).forEach(callback); // if an event did not trigger closing\n\n    if (\"closed\" !== this.readyState) {\n      // if we got data we're not polling\n      this._polling = false;\n      this.emitReserved(\"pollComplete\");\n\n      if (\"open\" === this.readyState) {\n        this._poll();\n      } else {}\n    }\n  }\n  /**\n   * For polling, send a close packet.\n   *\n   * @protected\n   */\n\n\n  doClose() {\n    const close = () => {\n      this.write([{\n        type: \"close\"\n      }]);\n    };\n\n    if (\"open\" === this.readyState) {\n      close();\n    } else {\n      // in case we're trying to close while\n      // handshaking is in progress (GH-164)\n      this.once(\"open\", close);\n    }\n  }\n  /**\n   * Writes a packets payload.\n   *\n   * @param {Array} packets - data packets\n   * @protected\n   */\n\n\n  write(packets) {\n    this.writable = false;\n    encodePayload(packets, data => {\n      this.doWrite(data, () => {\n        this.writable = true;\n        this.emitReserved(\"drain\");\n      });\n    });\n  }\n  /**\n   * Generates uri for connection.\n   *\n   * @private\n   */\n\n\n  uri() {\n    const schema = this.opts.secure ? \"https\" : \"http\";\n    const query = this.query || {}; // cache busting is forced\n\n    if (false !== this.opts.timestampRequests) {\n      query[this.opts.timestampParam] = randomString();\n    }\n\n    if (!this.supportsBinary && !query.sid) {\n      query.b64 = 1;\n    }\n\n    return this.createUri(schema, query);\n  }\n\n}","map":{"version":3,"names":["Transport","randomString","encodePayload","decodePayload","Polling","constructor","arguments","_polling","name","doOpen","_poll","pause","onPause","readyState","writable","total","once","doPoll","emitReserved","onData","data","callback","packet","type","onOpen","onClose","description","onPacket","socket","binaryType","forEach","doClose","close","write","packets","doWrite","uri","schema","opts","secure","query","timestampRequests","timestampParam","supportsBinary","sid","b64","createUri"],"sources":["/Users/roronoazoro/Desktop/collabEase-OJT/client/node_modules/engine.io-client/build/esm/transports/polling.js"],"sourcesContent":["import { Transport } from \"../transport.js\";\nimport { randomString } from \"../util.js\";\nimport { encodePayload, decodePayload } from \"engine.io-parser\";\nexport class Polling extends Transport {\n    constructor() {\n        super(...arguments);\n        this._polling = false;\n    }\n    get name() {\n        return \"polling\";\n    }\n    /**\n     * Opens the socket (triggers polling). We write a PING message to determine\n     * when the transport is open.\n     *\n     * @protected\n     */\n    doOpen() {\n        this._poll();\n    }\n    /**\n     * Pauses polling.\n     *\n     * @param {Function} onPause - callback upon buffers are flushed and transport is paused\n     * @package\n     */\n    pause(onPause) {\n        this.readyState = \"pausing\";\n        const pause = () => {\n            this.readyState = \"paused\";\n            onPause();\n        };\n        if (this._polling || !this.writable) {\n            let total = 0;\n            if (this._polling) {\n                total++;\n                this.once(\"pollComplete\", function () {\n                    --total || pause();\n                });\n            }\n            if (!this.writable) {\n                total++;\n                this.once(\"drain\", function () {\n                    --total || pause();\n                });\n            }\n        }\n        else {\n            pause();\n        }\n    }\n    /**\n     * Starts polling cycle.\n     *\n     * @private\n     */\n    _poll() {\n        this._polling = true;\n        this.doPoll();\n        this.emitReserved(\"poll\");\n    }\n    /**\n     * Overloads onData to detect payloads.\n     *\n     * @protected\n     */\n    onData(data) {\n        const callback = (packet) => {\n            // if its the first message we consider the transport open\n            if (\"opening\" === this.readyState && packet.type === \"open\") {\n                this.onOpen();\n            }\n            // if its a close packet, we close the ongoing requests\n            if (\"close\" === packet.type) {\n                this.onClose({ description: \"transport closed by the server\" });\n                return false;\n            }\n            // otherwise bypass onData and handle the message\n            this.onPacket(packet);\n        };\n        // decode payload\n        decodePayload(data, this.socket.binaryType).forEach(callback);\n        // if an event did not trigger closing\n        if (\"closed\" !== this.readyState) {\n            // if we got data we're not polling\n            this._polling = false;\n            this.emitReserved(\"pollComplete\");\n            if (\"open\" === this.readyState) {\n                this._poll();\n            }\n            else {\n            }\n        }\n    }\n    /**\n     * For polling, send a close packet.\n     *\n     * @protected\n     */\n    doClose() {\n        const close = () => {\n            this.write([{ type: \"close\" }]);\n        };\n        if (\"open\" === this.readyState) {\n            close();\n        }\n        else {\n            // in case we're trying to close while\n            // handshaking is in progress (GH-164)\n            this.once(\"open\", close);\n        }\n    }\n    /**\n     * Writes a packets payload.\n     *\n     * @param {Array} packets - data packets\n     * @protected\n     */\n    write(packets) {\n        this.writable = false;\n        encodePayload(packets, (data) => {\n            this.doWrite(data, () => {\n                this.writable = true;\n                this.emitReserved(\"drain\");\n            });\n        });\n    }\n    /**\n     * Generates uri for connection.\n     *\n     * @private\n     */\n    uri() {\n        const schema = this.opts.secure ? \"https\" : \"http\";\n        const query = this.query || {};\n        // cache busting is forced\n        if (false !== this.opts.timestampRequests) {\n            query[this.opts.timestampParam] = randomString();\n        }\n        if (!this.supportsBinary && !query.sid) {\n            query.b64 = 1;\n        }\n        return this.createUri(schema, query);\n    }\n}\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,iBAA1B;AACA,SAASC,YAAT,QAA6B,YAA7B;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,kBAA7C;AACA,OAAO,MAAMC,OAAN,SAAsBJ,SAAtB,CAAgC;EACnCK,WAAW,GAAG;IACV,MAAM,GAAGC,SAAT;IACA,KAAKC,QAAL,GAAgB,KAAhB;EACH;;EACO,IAAJC,IAAI,GAAG;IACP,OAAO,SAAP;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACIC,MAAM,GAAG;IACL,KAAKC,KAAL;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACIC,KAAK,CAACC,OAAD,EAAU;IACX,KAAKC,UAAL,GAAkB,SAAlB;;IACA,MAAMF,KAAK,GAAG,MAAM;MAChB,KAAKE,UAAL,GAAkB,QAAlB;MACAD,OAAO;IACV,CAHD;;IAIA,IAAI,KAAKL,QAAL,IAAiB,CAAC,KAAKO,QAA3B,EAAqC;MACjC,IAAIC,KAAK,GAAG,CAAZ;;MACA,IAAI,KAAKR,QAAT,EAAmB;QACfQ,KAAK;QACL,KAAKC,IAAL,CAAU,cAAV,EAA0B,YAAY;UAClC,EAAED,KAAF,IAAWJ,KAAK,EAAhB;QACH,CAFD;MAGH;;MACD,IAAI,CAAC,KAAKG,QAAV,EAAoB;QAChBC,KAAK;QACL,KAAKC,IAAL,CAAU,OAAV,EAAmB,YAAY;UAC3B,EAAED,KAAF,IAAWJ,KAAK,EAAhB;QACH,CAFD;MAGH;IACJ,CAdD,MAeK;MACDA,KAAK;IACR;EACJ;EACD;AACJ;AACA;AACA;AACA;;;EACID,KAAK,GAAG;IACJ,KAAKH,QAAL,GAAgB,IAAhB;IACA,KAAKU,MAAL;IACA,KAAKC,YAAL,CAAkB,MAAlB;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIC,MAAM,CAACC,IAAD,EAAO;IACT,MAAMC,QAAQ,GAAIC,MAAD,IAAY;MACzB;MACA,IAAI,cAAc,KAAKT,UAAnB,IAAiCS,MAAM,CAACC,IAAP,KAAgB,MAArD,EAA6D;QACzD,KAAKC,MAAL;MACH,CAJwB,CAKzB;;;MACA,IAAI,YAAYF,MAAM,CAACC,IAAvB,EAA6B;QACzB,KAAKE,OAAL,CAAa;UAAEC,WAAW,EAAE;QAAf,CAAb;QACA,OAAO,KAAP;MACH,CATwB,CAUzB;;;MACA,KAAKC,QAAL,CAAcL,MAAd;IACH,CAZD,CADS,CAcT;;;IACAnB,aAAa,CAACiB,IAAD,EAAO,KAAKQ,MAAL,CAAYC,UAAnB,CAAb,CAA4CC,OAA5C,CAAoDT,QAApD,EAfS,CAgBT;;IACA,IAAI,aAAa,KAAKR,UAAtB,EAAkC;MAC9B;MACA,KAAKN,QAAL,GAAgB,KAAhB;MACA,KAAKW,YAAL,CAAkB,cAAlB;;MACA,IAAI,WAAW,KAAKL,UAApB,EAAgC;QAC5B,KAAKH,KAAL;MACH,CAFD,MAGK,CACJ;IACJ;EACJ;EACD;AACJ;AACA;AACA;AACA;;;EACIqB,OAAO,GAAG;IACN,MAAMC,KAAK,GAAG,MAAM;MAChB,KAAKC,KAAL,CAAW,CAAC;QAAEV,IAAI,EAAE;MAAR,CAAD,CAAX;IACH,CAFD;;IAGA,IAAI,WAAW,KAAKV,UAApB,EAAgC;MAC5BmB,KAAK;IACR,CAFD,MAGK;MACD;MACA;MACA,KAAKhB,IAAL,CAAU,MAAV,EAAkBgB,KAAlB;IACH;EACJ;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACIC,KAAK,CAACC,OAAD,EAAU;IACX,KAAKpB,QAAL,GAAgB,KAAhB;IACAZ,aAAa,CAACgC,OAAD,EAAWd,IAAD,IAAU;MAC7B,KAAKe,OAAL,CAAaf,IAAb,EAAmB,MAAM;QACrB,KAAKN,QAAL,GAAgB,IAAhB;QACA,KAAKI,YAAL,CAAkB,OAAlB;MACH,CAHD;IAIH,CALY,CAAb;EAMH;EACD;AACJ;AACA;AACA;AACA;;;EACIkB,GAAG,GAAG;IACF,MAAMC,MAAM,GAAG,KAAKC,IAAL,CAAUC,MAAV,GAAmB,OAAnB,GAA6B,MAA5C;IACA,MAAMC,KAAK,GAAG,KAAKA,KAAL,IAAc,EAA5B,CAFE,CAGF;;IACA,IAAI,UAAU,KAAKF,IAAL,CAAUG,iBAAxB,EAA2C;MACvCD,KAAK,CAAC,KAAKF,IAAL,CAAUI,cAAX,CAAL,GAAkCzC,YAAY,EAA9C;IACH;;IACD,IAAI,CAAC,KAAK0C,cAAN,IAAwB,CAACH,KAAK,CAACI,GAAnC,EAAwC;MACpCJ,KAAK,CAACK,GAAN,GAAY,CAAZ;IACH;;IACD,OAAO,KAAKC,SAAL,CAAeT,MAAf,EAAuBG,KAAvB,CAAP;EACH;;AA5IkC"},"metadata":{},"sourceType":"module"}