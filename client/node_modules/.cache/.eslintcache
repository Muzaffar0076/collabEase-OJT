[{"/Users/roronoazoro/Desktop/collabEase-OJT/client/src/index.js":"1","/Users/roronoazoro/Desktop/collabEase-OJT/client/src/App.js":"2","/Users/roronoazoro/Desktop/collabEase-OJT/client/src/pages/Team.jsx":"3","/Users/roronoazoro/Desktop/collabEase-OJT/client/src/pages/Login.jsx":"4","/Users/roronoazoro/Desktop/collabEase-OJT/client/src/pages/Register.jsx":"5","/Users/roronoazoro/Desktop/collabEase-OJT/client/src/pages/Landing.jsx":"6","/Users/roronoazoro/Desktop/collabEase-OJT/client/src/pages/Projects.jsx":"7","/Users/roronoazoro/Desktop/collabEase-OJT/client/src/pages/Dashboard.jsx":"8","/Users/roronoazoro/Desktop/collabEase-OJT/client/src/components/Sidebar.jsx":"9","/Users/roronoazoro/Desktop/collabEase-OJT/client/src/components/Topbar.jsx":"10","/Users/roronoazoro/Desktop/collabEase-OJT/client/src/firebase.js":"11","/Users/roronoazoro/Desktop/collabEase-OJT/client/src/components/LogoutButton.jsx":"12","/Users/roronoazoro/Desktop/collabEase-OJT/client/src/pages/Profile.jsx":"13","/Users/roronoazoro/Desktop/collabEase-OJT/client/src/components/KanbanBoard.jsx":"14"},{"size":348,"mtime":1748199463251,"results":"15","hashOfConfig":"16"},{"size":2379,"mtime":1748205890324,"results":"17","hashOfConfig":"16"},{"size":7118,"mtime":1748199463252,"results":"18","hashOfConfig":"16"},{"size":3058,"mtime":1748205890312,"results":"19","hashOfConfig":"16"},{"size":3432,"mtime":1748205890312,"results":"20","hashOfConfig":"16"},{"size":1782,"mtime":1748205890312,"results":"21","hashOfConfig":"16"},{"size":30004,"mtime":1748205890807,"results":"22","hashOfConfig":"16"},{"size":19332,"mtime":1748205890724,"results":"23","hashOfConfig":"16"},{"size":1422,"mtime":1748199463251,"results":"24","hashOfConfig":"16"},{"size":3049,"mtime":1748201031399,"results":"25","hashOfConfig":"16"},{"size":520,"mtime":1748205890223,"results":"26","hashOfConfig":"16"},{"size":934,"mtime":1748205890662,"results":"27","hashOfConfig":"16"},{"size":11116,"mtime":1748205890627,"results":"28","hashOfConfig":"16"},{"size":15108,"mtime":1748205890741,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"6flkho",{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"33"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"/Users/roronoazoro/Desktop/collabEase-OJT/client/src/index.js",[],[],[],"/Users/roronoazoro/Desktop/collabEase-OJT/client/src/App.js",[],[],"/Users/roronoazoro/Desktop/collabEase-OJT/client/src/pages/Team.jsx",["79"],[],"import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport { FaUserEdit, FaTrash, FaUserPlus, FaEnvelope, FaLink, FaCheck, FaTimes } from 'react-icons/fa';\nimport '../styles/Dashboard.css';\nimport Sidebar from '../components/Sidebar';\nimport Topbar from '../components/Topbar';\n\nfunction Team({ user }) {\n  const [teamMembers, setTeamMembers] = useState([]);\n  const [showSuccess, setShowSuccess] = useState(false);\n  const [showInviteModal, setShowInviteModal] = useState(false);\n  const [inviteEmail, setInviteEmail] = useState('');\n  const [inviteLink, setInviteLink] = useState('');\n  const [inviteSuccess, setInviteSuccess] = useState('');\n  const [inviteError, setInviteError] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  // Fetch team members from backend\n  useEffect(() => {\n    fetchTeam();\n  }, []);\n\n  const fetchTeam = async () => {\n    setLoading(true);\n    try {\n      // Replace with your real API endpoint\n      const res = await axios.get('/api/team', { withCredentials: true });\n      setTeamMembers(res.data);\n    } catch (err) {\n      // fallback to mock data if API fails\n      setTeamMembers([\n        {\n          id: 1,\n          name: 'Sanket Jadhav',\n          email: 'sanket3280@gmail.com',\n          status: 'active',\n          role: 'Member',\n          avatar: '',\n        },\n        {\n          id: 2,\n          name: 'Sanket tanaji jadhav',\n          email: 'sankettanaj.p24@medhaviskil...',\n          status: 'inactive',\n          role: 'Member',\n          avatar: '',\n        },\n        {\n          id: 3,\n          name: '25F1001327 SANKET JADHAV',\n          email: '25f1001327@ds.study.iitm.ac...',\n          status: 'active',\n          role: 'Member',\n          avatar: '',\n        },\n        {\n          id: 4,\n          name: 'Sanket Jadhav',\n          email: 'sj546400@gmail.com',\n          status: 'active',\n          role: 'Member',\n          avatar: 'https://ui-avatars.com/api/?name=Sanket+Jadhav&background=000000&color=fff',\n        },\n      ]);\n    }\n    setLoading(false);\n  };\n\n  const handleDelete = async (id) => {\n    // Replace with your real API endpoint\n    try {\n      await axios.delete(`/api/team/${id}`, { withCredentials: true });\n      setShowSuccess(true);\n      setTeamMembers(teamMembers.filter(m => m.id !== id));\n    } catch (err) {\n      setShowSuccess(false);\n    }\n  };\n\n  const handleToggleStatus = async (id) => {\n    // Replace with your real API endpoint\n    setTeamMembers(teamMembers.map(m => m.id === id ? { ...m, status: m.status === 'active' ? 'inactive' : 'active' } : m));\n    // Optionally, call backend to update status\n  };\n\n  const handleInvite = async () => {\n    setInviteSuccess('');\n    setInviteError('');\n    try {\n      // Replace with your real API endpoint\n      // const res = await axios.post('/api/team/invite', { email: inviteEmail }, { withCredentials: true });\n      // setInviteLink(res.data.link);\n      setInviteLink('https://yourapp.com/invite/abc123'); // mock\n      setInviteSuccess('Invite sent successfully!');\n      setInviteEmail('');\n    } catch (err) {\n      setInviteError('Failed to send invite.');\n    }\n  };\n\n  return (\n    <div className=\"dashboard\">\n      <Sidebar />\n      <div style={{flex:1}}>\n        <Topbar\n          user={user}\n          userPhoto={user?.photo}\n          notifications={[]}\n          onProfile={() => {}}\n          onLogout={() => {}}\n        />\n        <main className=\"main-content\" style={{paddingTop:'80px'}}>\n          <div className=\"section-header-pro\" style={{alignItems:'center', marginBottom: 32}}>\n            <h3 style={{fontSize:'1.5rem'}}>Team Members</h3>\n            <button className=\"add-team-btn\" onClick={()=>setShowInviteModal(true)}><FaUserPlus style={{marginRight:6}}/>Add Team Member</button>\n          </div>\n          {showSuccess && (\n            <div className=\"team-success-alert\">User deleted successfully!</div>\n          )}\n          {loading ? <div>Loading...</div> : (\n          <div className=\"team-grid\">\n            {teamMembers.map(member => (\n              <div className=\"team-card\" key={member.id}>\n                <div className=\"team-card-avatar\">\n                  {member.avatar ? (\n                    <img src={member.avatar} alt={member.name} />\n                  ) : (\n                    <span>{member.name[0]}</span>\n                  )}\n                </div>\n                <div className=\"team-card-info\">\n                  <div className=\"team-card-name\">{member.name}</div>\n                  <div className=\"team-card-email\">{member.email}</div>\n                  <div className=\"team-card-badges\">\n                    <span className={`badge badge-${member.status}`}>{member.status === 'active' ? 'Active' : 'Inactive'}</span>\n                    <span className=\"badge badge-role\">{member.role}</span>\n                  </div>\n                </div>\n                <div className=\"team-card-actions\">\n                  <button className=\"team-action-btn\" title=\"Edit\"><FaUserEdit /></button>\n                  <button className=\"team-action-btn\" title=\"Delete\" onClick={()=>handleDelete(member.id)}><FaTrash /></button>\n                  <button className=\"team-action-btn\" title={member.status === 'active' ? 'Deactivate' : 'Activate'} onClick={()=>handleToggleStatus(member.id)}>{member.status === 'active' ? <FaTimes /> : <FaCheck />}</button>\n                </div>\n              </div>\n            ))}\n          </div>\n          )}\n          {/* Invite Modal */}\n          {showInviteModal && (\n            <div className=\"modal\">\n              <div className=\"modal-content\">\n                <h2>Invite Team Member</h2>\n                <div style={{marginBottom:12}}>\n                  <label>Email:</label>\n                  <input type=\"email\" value={inviteEmail} onChange={e=>setInviteEmail(e.target.value)} placeholder=\"Enter email\" style={{width:'100%'}} />\n                </div>\n                <button className=\"add-team-btn\" onClick={handleInvite} style={{marginBottom:12}}><FaEnvelope style={{marginRight:6}}/>Send Invite</button>\n                {inviteLink && (\n                  <div style={{marginBottom:12}}>\n                    <label>Or share this link:</label>\n                    <div style={{display:'flex',alignItems:'center',gap:8}}>\n                      <input type=\"text\" value={inviteLink} readOnly style={{flex:1}} />\n                      <button className=\"add-team-btn\" onClick={()=>navigator.clipboard.writeText(inviteLink)}><FaLink /></button>\n                    </div>\n                  </div>\n                )}\n                {inviteSuccess && <div className=\"team-success-alert\">{inviteSuccess}</div>}\n                {inviteError && <div className=\"error-message\">{inviteError}</div>}\n                <div className=\"modal-buttons\">\n                  <button className=\"cancel-btn\" onClick={()=>setShowInviteModal(false)}>Close</button>\n                </div>\n              </div>\n            </div>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n}\n\nexport default Team; ","/Users/roronoazoro/Desktop/collabEase-OJT/client/src/pages/Login.jsx",[],[],"/Users/roronoazoro/Desktop/collabEase-OJT/client/src/pages/Register.jsx",[],[],"/Users/roronoazoro/Desktop/collabEase-OJT/client/src/pages/Landing.jsx",[],[],"/Users/roronoazoro/Desktop/collabEase-OJT/client/src/pages/Projects.jsx",["80","81","82"],[],"import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport io from \"socket.io-client\";\nimport Sidebar from '../components/Sidebar';\nimport KanbanBoard from '../components/KanbanBoard';\nimport { FaPlus, FaProjectDiagram, FaTasks, FaCheckCircle, FaFilter, FaSearch, FaChartBar, FaArrowLeft, FaStar, FaTag, FaUser } from 'react-icons/fa';\nimport '../styles/Projects.css';\n// import { useSelector } from 'react-redux'; // For user info if needed\n\n// Mock users\nconst users = [\n  { id: 1, name: \"Rahul\", avatar: \"https://ui-avatars.com/api/?name=Rahul\" },\n  { id: 2, name: \"Sanjay\", avatar: \"https://ui-avatars.com/api/?name=Sanjay\" },\n  { id: 3, name: \"Priya\", avatar: \"https://ui-avatars.com/api/?name=Priya\" },\n];\n\n// Mock projects\nconst mockProjects = [\n  { \n    id: 101, \n    name: \"Website Redesign\", \n    description: \"Revamp the company website with modern UI and improved user experience. Focus on mobile responsiveness and performance optimization.\",\n    due: \"2024-07-01\", \n    status: \"Active\", \n    progress: 65,\n    members: [1, 2]\n  },\n  { \n    id: 102, \n    name: \"Mobile App\", \n    description: \"Build the new mobile app for iOS and Android platforms. Implement core functionality and integrate with existing backend systems.\",\n    due: \"2024-08-15\", \n    status: \"Planning\",\n    progress: 20,\n    members: [2, 3]\n  },\n  { \n    id: 103, \n    name: \"Marketing Campaign\", \n    description: \"Launch summer marketing campaign across digital channels. Create content, design assets, and track performance metrics.\",\n    due: \"2024-06-20\", \n    status: \"Active\",\n    progress: 85,\n    members: [1, 3]\n  },\n  { \n    id: 104, \n    name: \"Customer Portal\", \n    description: \"Develop a self-service customer portal for account management and support. Implement authentication, profile management, and ticketing system.\",\n    due: \"2024-09-30\", \n    status: \"Planning\",\n    progress: 10,\n    members: [1, 2, 3]\n  },\n];\n\n// Mock tasks\nconst initialTasks = [\n  {\n    id: 1,\n    projectId: 101,\n    title: \"Design UI Components\",\n    description: \"Create a modern component library for the website redesign\",\n    status: \"To Do\",\n    tags: [\"frontend\", \"design\"],\n    assignedTo: 1,\n    dueDate: \"2024-06-10\",\n    priority: \"High\",\n    subtasks: [\n      { id: 1, title: \"Header Component\", done: true },\n      { id: 2, title: \"Footer Component\", done: false },\n      { id: 3, title: \"Card Components\", done: false },\n    ],\n    attachments: [],\n  },\n  {\n    id: 2,\n    projectId: 101,\n    title: \"Setup Backend Architecture\",\n    description: \"Configure server and database for the new website\",\n    status: \"In Progress\",\n    tags: [\"backend\", \"infrastructure\"],\n    assignedTo: 2,\n    dueDate: \"2024-06-09\",\n    priority: \"Medium\",\n    subtasks: [\n      { id: 1, title: \"Configure Server\", done: true },\n      { id: 2, title: \"Setup Database\", done: true },\n      { id: 3, title: \"Configure CI/CD\", done: false },\n    ],\n    attachments: [],\n  },\n  {\n    id: 3,\n    projectId: 101,\n    title: \"Write Documentation\",\n    description: \"Create comprehensive developer documentation\",\n    status: \"Completed\",\n    tags: [\"docs\"],\n    assignedTo: 3,\n    dueDate: \"2024-06-08\",\n    priority: \"Low\",\n    subtasks: [],\n    attachments: [],\n  },\n  {\n    id: 4,\n    projectId: 102,\n    title: \"Design Mobile UI\",\n    description: \"Create UI designs for the mobile app\",\n    status: \"In Progress\",\n    tags: [\"design\", \"mobile\"],\n    assignedTo: 3,\n    dueDate: \"2024-06-15\",\n    priority: \"High\",\n    subtasks: [],\n    attachments: [],\n  },\n  {\n    id: 5,\n    projectId: 102,\n    title: \"Implement Authentication\",\n    description: \"Set up user authentication for the mobile app\",\n    status: \"To Do\",\n    tags: [\"backend\", \"security\"],\n    assignedTo: 2,\n    dueDate: \"2024-06-20\",\n    priority: \"High\",\n    subtasks: [],\n    attachments: [],\n  },\n];\n\nconst defaultStatuses = [\"To Do\", \"In Progress\", \"Completed\"];\n\nconst socket = io(\"http://localhost:5000\", { transports: ['websocket'] }); // Adjust backend URL as needed\n\nfunction Projects({ user, setUser }) {\n  const [projects, setProjects] = useState(mockProjects);\n  const [selectedProjectId, setSelectedProjectId] = useState(null);\n  const [tasks, setTasks] = useState(initialTasks);\n  const [statuses, setStatuses] = useState(defaultStatuses);\n  const [filterStatus, setFilterStatus] = useState(\"All\");\n  const [filterTag, setFilterTag] = useState(null);\n  const [filterUser, setFilterUser] = useState(null);\n  const [showStarred, setShowStarred] = useState(false);\n  const [notifications, setNotifications] = useState([]);\n  const [activeTab, setActiveTab] = useState(\"Tasks\");\n  const [search, setSearch] = useState(\"\");\n  const [showAddProject, setShowAddProject] = useState(false);\n  const [newProject, setNewProject] = useState({\n    name: '',\n    description: '',\n    due: '',\n    status: 'Planning',\n    members: []\n  });\n  \n  // Real-time notifications (Socket.io)\n  useEffect(() => {\n    socket.on(\"task-update\", (msg) => {\n      setNotifications((prev) => [...prev, msg]);\n      setTimeout(() => setNotifications((prev) => prev.slice(1)), 4000);\n    });\n    return () => socket.off(\"task-update\");\n  }, []);\n\n  // Handle task move in Kanban board\n  const handleTaskMove = (taskId, newStatus) => {\n    setTasks(prevTasks =>\n      prevTasks.map(task =>\n        task.id === taskId\n          ? { ...task, status: newStatus }\n          : task\n      )\n    );\n    socket.emit(\"task-update\", `Task moved to ${newStatus}`);\n  };\n  \n  // Handle new task creation\n  const handleTaskCreate = (newTask) => {\n    const taskWithProject = {\n      ...newTask,\n      projectId: selectedProjectId,\n      id: tasks.length + 1\n    };\n    setTasks(prevTasks => [...prevTasks, taskWithProject]);\n    socket.emit(\"task-update\", `New task created: ${newTask.title}`);\n  };\n  \n  // Handle task update\n  const handleTaskUpdate = (updatedTask) => {\n    setTasks(prevTasks =>\n      prevTasks.map(task =>\n        task.id === updatedTask.id ? updatedTask : task\n      )\n    );\n    socket.emit(\"task-update\", `Task updated: ${updatedTask.title}`);\n  };\n  \n  // Handle task deletion\n  const handleTaskDelete = (taskId) => {\n    setTasks(prevTasks => prevTasks.filter(task => task.id !== taskId));\n    socket.emit(\"task-update\", `Task deleted`);\n  };\n  \n  // Handle adding new status column\n  const handleStatusCreate = (newStatus) => {\n    if (!statuses.includes(newStatus)) {\n      setStatuses(prevStatuses => [...prevStatuses, newStatus]);\n    }\n  };\n  \n  // Handle new project creation\n  const handleCreateProject = () => {\n    if (!newProject.name) return;\n    \n    const projectId = projects.length > 0 ? Math.max(...projects.map(p => p.id)) + 1 : 1;\n    const newProjectWithId = {\n      ...newProject,\n      id: projectId,\n      progress: 0\n    };\n    \n    setProjects(prevProjects => [...prevProjects, newProjectWithId]);\n    setNewProject({\n      name: '',\n      description: '',\n      due: '',\n      status: 'Planning',\n      members: []\n    });\n    setShowAddProject(false);\n  };\n\n  // Filter tasks for selected project\n  const projectTasks = selectedProjectId\n    ? tasks.filter(t => t.projectId === selectedProjectId)\n    : [];\n\n  // Stats\n  const selectedProject = projects.find(p => p.id === selectedProjectId);\n  const totalTasks = projectTasks.length;\n  const completedTasks = projectTasks.filter(t => t.status === \"Completed\").length;\n  const inProgressTasks = projectTasks.filter(t => t.status === \"In Progress\").length;\n  const progress = selectedProject?.progress || (totalTasks ? Math.round((completedTasks / totalTasks) * 100) : 0);\n\n  // Filtering\n  const allTags = Array.from(new Set(projectTasks.flatMap((t) => t.tags || [])));\n  let filteredTasks = projectTasks.filter((task) => {\n    if (showStarred && !task.pinned) return false;\n    if (filterTag && !task.tags?.includes(filterTag)) return false;\n    if (filterUser && filterUser !== \"unassigned\" && task.assignedTo !== parseInt(filterUser)) return false;\n    if (filterUser === \"unassigned\" && task.assignedTo) return false;\n    if (search && !task.title.toLowerCase().includes(search.toLowerCase())) return false;\n    if (filterStatus !== \"All\" && task.status !== filterStatus) return false;\n    return true;\n  });\n  \n  // Format date for display\n  const formatDate = (dateString) => {\n    if (!dateString) return '';\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', { \n      month: 'short', \n      day: 'numeric', \n      year: 'numeric' \n    });\n  };\n  \n  // Calculate days remaining\n  const getDaysRemaining = (dueDate) => {\n    if (!dueDate) return null;\n    \n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    \n    const due = new Date(dueDate);\n    due.setHours(0, 0, 0, 0);\n    \n    const diffTime = due - today;\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    \n    return diffDays;\n  };\n  \n  // Get status color class\n  const getStatusClass = (status) => {\n    switch(status?.toLowerCase()) {\n      case 'active': return 'status-active';\n      case 'planning': return 'status-planning';\n      case 'completed': return 'status-completed';\n      case 'on hold': return 'status-hold';\n      default: return '';\n    }\n  };\n\n  // Main layout\n  return (\n    <div className=\"dashboard\">\n      <Sidebar />\n      <div className=\"projects-main\">\n        {!selectedProjectId ? (\n          <div className=\"projects-overview\">\n            <div className=\"projects-header\">\n              <h1>Projects</h1>\n              <button className=\"new-project-button\" onClick={() => setShowAddProject(true)}>\n                <FaPlus /> New Project\n              </button>\n            </div>\n            \n            {/* Projects Stats */}\n            <div className=\"projects-stats\">\n              <div className=\"stat-card\">\n                <div className=\"stat-icon\">\n                  <FaProjectDiagram />\n                </div>\n                <div className=\"stat-info\">\n                  <h3>Total Projects</h3>\n                  <p>{projects.length}</p>\n                </div>\n              </div>\n              <div className=\"stat-card\">\n                <div className=\"stat-icon\">\n                  <FaTasks />\n                </div>\n                <div className=\"stat-info\">\n                  <h3>Active Tasks</h3>\n                  <p>{tasks.filter(t => t.status !== \"Completed\").length}</p>\n                </div>\n              </div>\n              <div className=\"stat-card\">\n                <div className=\"stat-icon\">\n                  <FaCheckCircle />\n                </div>\n                <div className=\"stat-info\">\n                  <h3>Completed</h3>\n                  <p>{tasks.filter(t => t.status === \"Completed\").length}</p>\n                </div>\n              </div>\n            </div>\n            \n            {/* Project Search and Filters */}\n            <div className=\"projects-filters\">\n              <div className=\"search-container\">\n                <FaSearch className=\"search-icon\" />\n                <input \n                  type=\"text\" \n                  placeholder=\"Search projects...\" \n                  value={search}\n                  onChange={e => setSearch(e.target.value)}\n                />\n              </div>\n              <div className=\"filter-buttons\">\n                <button className={`filter-btn ${filterStatus === \"All\" ? \"active\" : \"\"}`} onClick={() => setFilterStatus(\"All\")}>\n                  All\n                </button>\n                <button className={`filter-btn ${filterStatus === \"Active\" ? \"active\" : \"\"}`} onClick={() => setFilterStatus(\"Active\")}>\n                  Active\n                </button>\n                <button className={`filter-btn ${filterStatus === \"Planning\" ? \"active\" : \"\"}`} onClick={() => setFilterStatus(\"Planning\")}>\n                  Planning\n                </button>\n                <button className={`filter-btn ${filterStatus === \"Completed\" ? \"active\" : \"\"}`} onClick={() => setFilterStatus(\"Completed\")}>\n                  Completed\n                </button>\n              </div>\n            </div>\n            \n            {/* Projects Grid */}\n            <div className=\"projects-grid\">\n              {projects\n                .filter(project => filterStatus === \"All\" || project.status === filterStatus)\n                .filter(project => !search || project.name.toLowerCase().includes(search.toLowerCase()) || project.description.toLowerCase().includes(search.toLowerCase()))\n                .map(project => (\n                <div key={project.id} className=\"project-card\" onClick={() => setSelectedProjectId(project.id)}>\n                  <div className=\"project-header\">\n                    <h3>{project.name}</h3>\n                    <span className={`project-status ${getStatusClass(project.status)}`}>\n                      {project.status}\n                    </span>\n                  </div>\n                  <p className=\"project-description\">{project.description}</p>\n                  <div className=\"project-progress\">\n                    <div className=\"progress-label\">\n                      <span>Progress</span>\n                      <span>{project.progress}%</span>\n                    </div>\n                    <div className=\"progress-bar\">\n                      <div \n                        className=\"progress-fill\" \n                        style={{ width: `${project.progress}%` }}\n                      ></div>\n                    </div>\n                  </div>\n                  <div className=\"project-meta\">\n                    <div className=\"project-due\">\n                      {project.due && (\n                        <>\n                          <span className=\"due-label\">Due:</span>\n                          <span className=\"due-date\">{formatDate(project.due)}</span>\n                          {getDaysRemaining(project.due) !== null && (\n                            <span className={`days-remaining ${getDaysRemaining(project.due) < 0 ? 'overdue' : getDaysRemaining(project.due) <= 5 ? 'due-soon' : ''}`}>\n                              {getDaysRemaining(project.due) < 0 \n                                ? `${Math.abs(getDaysRemaining(project.due))} days overdue` \n                                : getDaysRemaining(project.due) === 0 \n                                  ? 'Due today' \n                                  : `${getDaysRemaining(project.due)} days left`}\n                            </span>\n                          )}\n                        </>\n                      )}\n                    </div>\n                    <div className=\"project-team\">\n                      {project.members && project.members.map(memberId => {\n                        const member = users.find(u => u.id === memberId);\n                        return member ? (\n                          <div key={memberId} className=\"team-avatar\" title={member.name}>\n                            <img src={member.avatar} alt={member.name} />\n                          </div>\n                        ) : null;\n                      })}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n            \n            {/* Add Project Form */}\n            {showAddProject && (\n              <div className=\"modal-overlay\" onClick={() => setShowAddProject(false)}>\n                <div className=\"modal-content\" onClick={e => e.stopPropagation()}>\n                  <h2>Create New Project</h2>\n                  <form className=\"new-project-form\">\n                    <div className=\"form-group\">\n                      <label htmlFor=\"projectName\">Project Name</label>\n                      <input \n                        type=\"text\" \n                        id=\"projectName\" \n                        value={newProject.name}\n                        onChange={e => setNewProject({...newProject, name: e.target.value})}\n                        placeholder=\"Enter project name\"\n                        required\n                      />\n                    </div>\n                    <div className=\"form-group\">\n                      <label htmlFor=\"projectDescription\">Description</label>\n                      <textarea \n                        id=\"projectDescription\"\n                        value={newProject.description}\n                        onChange={e => setNewProject({...newProject, description: e.target.value})}\n                        placeholder=\"Enter project description\"\n                        rows=\"3\"\n                      ></textarea>\n                    </div>\n                    <div className=\"form-row\">\n                      <div className=\"form-group half\">\n                        <label htmlFor=\"projectDue\">Due Date</label>\n                        <input \n                          type=\"date\" \n                          id=\"projectDue\"\n                          value={newProject.due}\n                          onChange={e => setNewProject({...newProject, due: e.target.value})}\n                        />\n                      </div>\n                      <div className=\"form-group half\">\n                        <label htmlFor=\"projectStatus\">Status</label>\n                        <select \n                          id=\"projectStatus\"\n                          value={newProject.status}\n                          onChange={e => setNewProject({...newProject, status: e.target.value})}\n                        >\n                          <option value=\"Planning\">Planning</option>\n                          <option value=\"Active\">Active</option>\n                          <option value=\"On Hold\">On Hold</option>\n                          <option value=\"Completed\">Completed</option>\n                        </select>\n                      </div>\n                    </div>\n                    <div className=\"form-group\">\n                      <label>Team Members</label>\n                      <div className=\"team-selection\">\n                        {users.map(user => (\n                          <div \n                            key={user.id}\n                            className={`team-select-item ${newProject.members.includes(user.id) ? 'selected' : ''}`}\n                            onClick={() => {\n                              const isSelected = newProject.members.includes(user.id);\n                              setNewProject({\n                                ...newProject, \n                                members: isSelected \n                                  ? newProject.members.filter(id => id !== user.id)\n                                  : [...newProject.members, user.id]\n                              });\n                            }}\n                          >\n                            <img src={user.avatar} alt={user.name} />\n                            <span>{user.name}</span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                    <div className=\"form-actions\">\n                      <button \n                        type=\"button\" \n                        className=\"cancel-btn\"\n                        onClick={() => setShowAddProject(false)}\n                      >\n                        Cancel\n                      </button>\n                      <button \n                        type=\"button\" \n                        className=\"submit-btn\"\n                        onClick={handleCreateProject}\n                      >\n                        Create Project\n                      </button>\n                    </div>\n                  </form>\n                </div>\n              </div>\n            )}\n          </div>\n        ) : (\n          <div className=\"project-detail\">\n            {/* Project Header */}\n            <div className=\"project-detail-header\">\n              <button className=\"back-button\" onClick={() => setSelectedProjectId(null)}>\n                <FaArrowLeft /> Back to Projects\n              </button>\n              <h1>{selectedProject?.name}</h1>\n              <span className={`project-status ${getStatusClass(selectedProject?.status)}`}>\n                {selectedProject?.status}\n              </span>\n            </div>\n            \n            {/* Project Info */}\n            <div className=\"project-info\">\n              <p className=\"project-description\">{selectedProject?.description}</p>\n              <div className=\"project-meta-info\">\n                <div className=\"due-date-info\">\n                  <span className=\"info-label\">Due Date:</span>\n                  <span className=\"info-value\">{formatDate(selectedProject?.due)}</span>\n                  {getDaysRemaining(selectedProject?.due) !== null && (\n                    <span className={`days-remaining ${getDaysRemaining(selectedProject?.due) < 0 ? 'overdue' : getDaysRemaining(selectedProject?.due) <= 5 ? 'due-soon' : ''}`}>\n                      {getDaysRemaining(selectedProject?.due) < 0 \n                        ? `(${Math.abs(getDaysRemaining(selectedProject?.due))} days overdue)` \n                        : getDaysRemaining(selectedProject?.due) === 0 \n                          ? '(Due today)' \n                          : `(${getDaysRemaining(selectedProject?.due)} days left)`}\n                    </span>\n                  )}\n                </div>\n                <div className=\"team-info\">\n                  <span className=\"info-label\">Team:</span>\n                  <div className=\"team-avatars\">\n                    {selectedProject?.members?.map(memberId => {\n                      const member = users.find(u => u.id === memberId);\n                      return member ? (\n                        <div key={memberId} className=\"team-avatar\" title={member.name}>\n                          <img src={member.avatar} alt={member.name} />\n                        </div>\n                      ) : null;\n                    })}\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            {/* Project Progress */}\n            <div className=\"project-progress-section\">\n              <div className=\"progress-header\">\n                <h3>Project Progress</h3>\n                <span className=\"progress-percentage\">{progress}%</span>\n              </div>\n              <div className=\"progress-bar\">\n                <div \n                  className=\"progress-fill\" \n                  style={{ width: `${progress}%` }}\n                ></div>\n              </div>\n              <div className=\"progress-stats\">\n                <div className=\"progress-stat\">\n                  <div className=\"stat-label\">Total Tasks</div>\n                  <div className=\"stat-value\">{totalTasks}</div>\n                </div>\n                <div className=\"progress-stat\">\n                  <div className=\"stat-label\">Completed</div>\n                  <div className=\"stat-value\">{completedTasks}</div>\n                </div>\n                <div className=\"progress-stat\">\n                  <div className=\"stat-label\">In Progress</div>\n                  <div className=\"stat-value\">{inProgressTasks}</div>\n                </div>\n                <div className=\"progress-stat\">\n                  <div className=\"stat-label\">To Do</div>\n                  <div className=\"stat-value\">{totalTasks - completedTasks - inProgressTasks}</div>\n                </div>\n              </div>\n            </div>\n            \n            {/* Project Tabs */}\n            <div className=\"project-tabs\">\n              <button \n                className={`project-tab ${activeTab === 'Tasks' ? 'active' : ''}`}\n                onClick={() => setActiveTab('Tasks')}\n              >\n                <FaTasks /> Tasks\n              </button>\n              <button \n                className={`project-tab ${activeTab === 'Team' ? 'active' : ''}`}\n                onClick={() => setActiveTab('Team')}\n              >\n                <FaUser /> Team\n              </button>\n              <button \n                className={`project-tab ${activeTab === 'Analytics' ? 'active' : ''}`}\n                onClick={() => setActiveTab('Analytics')}\n              >\n                <FaChartBar /> Analytics\n              </button>\n            </div>\n            \n            {/* Tab Content */}\n            <div className=\"project-tab-content\">\n              {activeTab === 'Tasks' ? (\n                <>\n                  {/* Task Filters */}\n                  <div className=\"task-filters\">\n                    <div className=\"filter-section\">\n                      <button className={`filter-chip ${filterStatus === 'All' ? 'active' : ''}`} onClick={() => setFilterStatus('All')}>\n                        All\n                      </button>\n                      {statuses.map(status => (\n                        <button \n                          key={status}\n                          className={`filter-chip ${filterStatus === status ? 'active' : ''}`}\n                          onClick={() => setFilterStatus(status)}\n                        >\n                          {status}\n                        </button>\n                      ))}\n                    </div>\n                    \n                    {allTags.length > 0 && (\n                      <div className=\"filter-section\">\n                        <FaTag className=\"filter-icon\" />\n                        <button className={`filter-chip ${!filterTag ? 'active' : ''}`} onClick={() => setFilterTag(null)}>\n                          All Tags\n                        </button>\n                        {allTags.map(tag => (\n                          <button \n                            key={tag}\n                            className={`filter-chip ${filterTag === tag ? 'active' : ''}`}\n                            onClick={() => setFilterTag(tag)}\n                          >\n                            {tag}\n                          </button>\n                        ))}\n                      </div>\n                    )}\n                    \n                    <div className=\"filter-section\">\n                      <FaUser className=\"filter-icon\" />\n                      <button className={`filter-chip ${!filterUser ? 'active' : ''}`} onClick={() => setFilterUser(null)}>\n                        All Users\n                      </button>\n                      {users.map(user => (\n                        <button \n                          key={user.id}\n                          className={`filter-chip ${filterUser === user.id.toString() ? 'active' : ''}`}\n                          onClick={() => setFilterUser(user.id.toString())}\n                        >\n                          {user.name}\n                        </button>\n                      ))}\n                      <button \n                        className={`filter-chip ${filterUser === 'unassigned' ? 'active' : ''}`}\n                        onClick={() => setFilterUser('unassigned')}\n                      >\n                        Unassigned\n                      </button>\n                    </div>\n                    \n                    <div className=\"filter-section\">\n                      <FaStar className=\"filter-icon\" />\n                      <button \n                        className={`filter-chip ${showStarred ? 'active' : ''}`}\n                        onClick={() => setShowStarred(!showStarred)}\n                      >\n                        Starred\n                      </button>\n                    </div>\n                  </div>\n                  \n                  {/* Kanban Board */}\n                  <KanbanBoard \n                    tasks={filteredTasks}\n                    statuses={statuses}\n                    onTaskMove={handleTaskMove}\n                    onTaskCreate={handleTaskCreate}\n                    onTaskUpdate={handleTaskUpdate}\n                    onTaskDelete={handleTaskDelete}\n                    onStatusCreate={handleStatusCreate}\n                    users={users}\n                  />\n                </>\n              ) : activeTab === 'Team' ? (\n                <div className=\"team-tab-content\">\n                  <h3>Team Members</h3>\n                  <div className=\"team-members-list\">\n                    {selectedProject?.members?.map(memberId => {\n                      const member = users.find(u => u.id === memberId);\n                      return member ? (\n                        <div key={memberId} className=\"team-member-card\">\n                          <img className=\"member-avatar\" src={member.avatar} alt={member.name} />\n                          <div className=\"member-info\">\n                            <h4>{member.name}</h4>\n                            <p>{member.role || 'Team Member'}</p>\n                          </div>\n                          <div className=\"member-tasks\">\n                            <div className=\"task-count\">\n                              <span className=\"count\">{projectTasks.filter(t => t.assignedTo === memberId).length}</span>\n                              <span className=\"label\">Tasks</span>\n                            </div>\n                            <div className=\"task-count\">\n                              <span className=\"count\">{projectTasks.filter(t => t.assignedTo === memberId && t.status === 'Completed').length}</span>\n                              <span className=\"label\">Completed</span>\n                            </div>\n                          </div>\n                        </div>\n                      ) : null;\n                    })}\n                  </div>\n                </div>\n              ) : (\n                <div className=\"analytics-tab-content\">\n                  <h3>Project Analytics</h3>\n                  <div className=\"analytics-message\">\n                    <FaChartBar className=\"analytics-icon\" />\n                    <p>Analytics feature coming soon</p>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Projects; ",[],"/Users/roronoazoro/Desktop/collabEase-OJT/client/src/pages/Dashboard.jsx",["83","84","85","86","87"],[],"import { useState, useEffect } from \"react\";\nimport { useNavigate, Link } from \"react-router-dom\";\nimport axios from \"axios\";\nimport \"../styles/Dashboard.css\";\nimport { FaUserEdit, FaTrash, FaCheckCircle, FaClock, FaFolder, FaTasks, FaExclamationCircle, FaBell, FaUserCircle, FaSignOutAlt, FaSearch } from 'react-icons/fa';\nimport Sidebar from '../components/Sidebar';\nimport Topbar from '../components/Topbar';\nimport LogoutButton from '../components/LogoutButton';\n\nfunction Dashboard({ user, setUser }) {\n  const navigate = useNavigate();\n  const [projects, setProjects] = useState([]);\n  const [tasks, setTasks] = useState([]);\n  const [stats, setStats] = useState({\n    totalTasks: 0,\n    overdueTasks: 0,\n    todayTasks: 0,\n    completedTasks: 0\n  });\n  const [showNotifications, setShowNotifications] = useState(false);\n  const [notifications] = useState([\n    {\n      id: 1,\n      message: \"New task assigned: Complete project documentation\",\n      time: \"2 hours ago\",\n      photo: \"https://ui-avatars.com/api/?name=John+Doe\"\n    },\n    {\n      id: 2,\n      message: \"Project deadline updated: Marketing Campaign\",\n      time: \"5 hours ago\",\n      photo: \"https://ui-avatars.com/api/?name=Jane+Smith\"\n    }\n  ]);\n  const [showProfile, setShowProfile] = useState(false);\n  const [userPhoto, setUserPhoto] = useState(null);\n  const [recentActivity] = useState([\n    {\n      id: 1,\n      type: 'login',\n      description: 'Logged in from Chrome on Windows',\n      timestamp: '2024-03-20T10:30:00',\n      location: 'New York, USA',\n      device: 'Chrome on Windows'\n    },\n    {\n      id: 2,\n      type: 'password_change',\n      description: 'Password changed successfully',\n      timestamp: '2024-03-19T15:45:00',\n      location: 'New York, USA',\n      device: 'Chrome on Windows'\n    },\n    {\n      id: 3,\n      type: 'login',\n      description: 'Logged in from Safari on iPhone',\n      timestamp: '2024-03-18T09:15:00',\n      location: 'New York, USA',\n      device: 'Safari on iPhone'\n    }\n  ]);\n  const [showSuccess, setShowSuccess] = useState(false);\n\n  // Mock team members for demo\n  const teamMembers = [\n    {\n      id: 1,\n      name: 'Sanket Jadhav',\n      email: 'sanket3280@gmail.com',\n      status: 'Active',\n      role: 'Member',\n      avatar: '',\n    },\n    {\n      id: 2,\n      name: 'Sanket tanaji jadhav',\n      email: 'sankettanaj.p24@medhaviskil...',\n      status: 'Active',\n      role: 'Member',\n      avatar: '',\n    },\n    {\n      id: 3,\n      name: '25F1001327 SANKET JADHAV',\n      email: '25f1001327@ds.study.iitm.ac...',\n      status: 'Active',\n      role: 'Member',\n      avatar: '',\n    },\n    {\n      id: 4,\n      name: 'Sanket Jadhav',\n      email: 'sj546400@gmail.com',\n      status: 'Active',\n      role: 'Member',\n      avatar: 'https://ui-avatars.com/api/?name=Sanket+Jadhav&background=000000&color=fff',\n    },\n  ];\n\n  useEffect(() => {\n    fetchProjects();\n    // Fetch user profile photo\n    const fetchUserPhoto = async () => {\n      try {\n        // For demo purposes, use a placeholder avatar\n        setUserPhoto(user?.photoURL || `https://ui-avatars.com/api/?name=${encodeURIComponent(user?.displayName || user?.email || \"User\")}&background=5a5ee3&color=fff`);\n      } catch (error) {\n        console.error('Error fetching user photo:', error);\n      }\n    };\n\n    fetchUserPhoto();\n  }, [user]);\n\n  const fetchProjects = async () => {\n    try {\n      // For demo purposes, we'll use mock data if API call fails\n      const mockProjects = [\n        {\n          id: 1,\n          title: \"Website Redesign\",\n          description: \"Complete overhaul of company website with modern UI\",\n          status: \"In Progress\"\n        },\n        {\n          id: 2,\n          title: \"Mobile App Development\",\n          description: \"Cross-platform mobile application for customer engagement\",\n          status: \"Planning\"\n        },\n        {\n          id: 3,\n          title: \"Marketing Campaign\",\n          description: \"Q2 digital marketing campaign for new product launch\",\n          status: \"On Hold\"\n        }\n      ];\n      \n      try {\n        const response = await axios.get(\"http://localhost:5000/api/projects\", {\n          withCredentials: true,\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          }\n        });\n        setProjects(response.data);\n      } catch (error) {\n        console.error(\"Error fetching projects:\", error);\n        setProjects(mockProjects);\n      }\n    } catch (error) {\n      console.error(\"Error in fetchProjects:\", error);\n    }\n  };\n\n  const handleLogout = async () => {\n    // Immediately clear user and redirect\n    setUser(null);\n    navigate(\"/login\", { replace: true });\n  };\n\n  const handleProfileClick = (e) => {\n    e.stopPropagation(); // Stop event from propagating\n    console.log(\"Profile clicked, current state:\", showProfile);\n    setShowProfile(!showProfile);\n    setShowNotifications(false);\n  };\n\n  const handleNotificationsClick = (e) => {\n    e.stopPropagation(); // Stop event from propagating\n    console.log(\"Notifications clicked, current state:\", showNotifications);\n    setShowNotifications(!showNotifications);\n    setShowProfile(false);\n  };\n\n  const handleClickOutside = (event) => {\n    // Don't close if clicking on these elements\n    const profileContainer = event.target.closest('.profile-container');\n    const notificationsContainer = event.target.closest('.notifications-container');\n    const profileButton = event.target.closest('.profile-btn');\n    const notificationButton = event.target.closest('.icon-button');\n    \n    // Debug logging\n    console.log(\"Click outside - Profile:\", !profileContainer && !profileButton);\n    console.log(\"Click outside - Notification:\", !notificationsContainer && !notificationButton);\n    \n    // Handle profile dropdown\n    if (showProfile && !profileContainer && !profileButton) {\n      setShowProfile(false);\n    }\n    \n    // Handle notifications dropdown\n    if (showNotifications && !notificationsContainer && !notificationButton) {\n      setShowNotifications(false);\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('click', handleClickOutside);\n    return () => {\n      document.removeEventListener('click', handleClickOutside);\n    };\n  }, [showProfile, showNotifications]);\n\n  // Format date for better display\n  const formatDate = (dateString) => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', { \n      month: 'short', \n      day: 'numeric', \n      year: 'numeric' \n    });\n  };\n\n  return (\n    <div className=\"dashboard\">\n      <Sidebar />\n      <div className=\"dashboard-main\">\n        <div className=\"welcome-message\">\n          <div>\n            <h2>Welcome back, {user?.displayName || user?.email || \"User\"}!</h2>\n            <p>Here's what's happening in your projects today.</p>\n            <button \n              onClick={() => navigate('/profile')} \n              style={{ \n                padding: '8px 12px', \n                background: '#fff', \n                color: '#4e73df', \n                border: 'none', \n                borderRadius: '4px', \n                cursor: 'pointer',\n                marginTop: '10px',\n                fontWeight: '600'\n              }}\n            >\n              Go to Profile Page\n            </button>\n          </div>\n          <div style={{ display: 'flex', gap: '10px', alignItems: 'center' }}>\n            <div style={{ padding: '8px 12px', background: 'rgba(255,255,255,0.2)', color: 'white', borderRadius: '4px', fontSize: '14px' }}>\n              Firebase Auth: {user ? '✓ Connected' : '✗ Not connected'}\n            </div>\n            <LogoutButton setUser={setUser} />\n          </div>\n        </div>\n\n        <div className=\"topbar\">\n          <div className=\"search-container\">\n            <FaSearch className=\"search-icon\" />\n            <input type=\"text\" className=\"search-input\" placeholder=\"Search projects, tasks, and team...\" />\n          </div>\n          <div className=\"topbar-actions\">\n            <div className=\"notifications-container\">\n              <button className=\"icon-button\" onClick={handleNotificationsClick} title=\"Notifications\">\n                <FaBell />\n                {notifications.length > 0 && <span className=\"notification-badge\">{notifications.length}</span>}\n              </button>\n              {showNotifications && (\n                <div className=\"notifications-dropdown\">\n                  <div className=\"notifications-header\">\n                    <h3>Notifications</h3>\n                    <button className=\"mark-all-read\">Mark all as read</button>\n                  </div>\n                  <div className=\"notifications-list\">\n                    {notifications.length > 0 ? (\n                      notifications.map(notification => (\n                        <div className=\"notification-item\" key={notification.id}>\n                          <div className=\"notification-avatar\">\n                            <img src={notification.photo} alt=\"User\" />\n                          </div>\n                          <div className=\"notification-content\">\n                            <p>{notification.message}</p>\n                            <span className=\"notification-time\">{notification.time}</span>\n                          </div>\n                        </div>\n                      ))\n                    ) : (\n                      <div className=\"empty-notifications\">\n                        <p>No new notifications</p>\n                      </div>\n                    )}\n                  </div>\n                  <div className=\"notifications-footer\">\n                    <Link to=\"/notifications\" onClick={() => setShowNotifications(false)}>\n                      View all notifications\n                    </Link>\n                  </div>\n                </div>\n              )}\n            </div>\n            <div className=\"profile-container\">\n              <button className=\"icon-button profile-btn\" onClick={handleProfileClick} title=\"Profile\">\n                {userPhoto ? (\n                  <img src={userPhoto} alt=\"Profile\" className=\"profile-image\" />\n                ) : (\n                  <span className=\"profile-initial\">{user?.displayName?.charAt(0) || user?.email?.charAt(0) || \"U\"}</span>\n                )}\n              </button>\n              {showProfile && (\n                <div className=\"profile-dropdown\">\n                  <div className=\"profile-info\">\n                    {userPhoto ? (\n                      <img src={userPhoto} alt=\"Profile\" className=\"profile-image-large\" />\n                    ) : (\n                      <div className=\"profile-initial-large\">\n                        {user?.displayName?.charAt(0) || user?.email?.charAt(0) || \"U\"}\n                      </div>\n                    )}\n                    <h3>{user?.displayName || user?.email || 'User'}</h3>\n                    <p>{user?.email}</p>\n                  </div>\n                  <div className=\"dropdown-divider\"></div>\n                  <Link \n                    to=\"/profile\" \n                    className=\"dropdown-link\"\n                    onClick={() => setShowProfile(false)}\n                    style={{ textDecoration: 'none' }}\n                  >\n                    <FaUserCircle />\n                    View Profile\n                  </Link>\n                  <div className=\"dropdown-divider\"></div>\n                  <button \n                    className=\"dropdown-link logout-btn\" \n                    onClick={(e) => {\n                      e.preventDefault();\n                      e.stopPropagation();\n                      handleLogout();\n                    }}\n                    type=\"button\"\n                  >\n                    <FaSignOutAlt />\n                    Logout\n                  </button>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Stats Cards */}\n        <section className=\"dashboard-stats-pro\">\n          <div className=\"stat-card-pro\">\n            <div className=\"stat-icon stat-projects\">\n              <FaFolder />\n            </div>\n            <div className=\"stat-info\">\n              <div className=\"stat-title\">Projects</div>\n              <div className=\"stat-value\">{projects.length}</div>\n            </div>\n          </div>\n          <div className=\"stat-card-pro\">\n            <div className=\"stat-icon stat-tasks\">\n              <FaTasks />\n            </div>\n            <div className=\"stat-info\">\n              <div className=\"stat-title\">Total Tasks</div>\n              <div className=\"stat-value\">{stats.totalTasks || 12}</div>\n            </div>\n          </div>\n          <div className=\"stat-card-pro\">\n            <div className=\"stat-icon stat-completed\">\n              <FaCheckCircle />\n            </div>\n            <div className=\"stat-info\">\n              <div className=\"stat-title\">Completed</div>\n              <div className=\"stat-value\">{stats.completedTasks || 5}</div>\n            </div>\n          </div>\n          <div className=\"stat-card-pro\">\n            <div className=\"stat-icon stat-overdue\">\n              <FaExclamationCircle />\n            </div>\n            <div className=\"stat-info\">\n              <div className=\"stat-title\">Overdue</div>\n              <div className=\"stat-value\">{stats.overdueTasks || 2}</div>\n            </div>\n          </div>\n        </section>\n\n        {/* Main Dashboard Sections */}\n        <div className=\"dashboard-sections-pro\">\n          <section className=\"my-tasks-section\">\n            <div className=\"section-header-pro\">\n              <h3>My Tasks</h3>\n              <button className=\"view-all-link\">View all</button>\n            </div>\n            <div className=\"my-tasks-list\">\n              {tasks && tasks.length > 0 ? (\n                tasks.map(task => (\n                  <div key={task.id} className=\"task-item\">\n                    <h4>{task.title}</h4>\n                    <p>{task.description}</p>\n                  </div>\n                ))\n              ) : (\n                <div className=\"empty-state\">\n                  <FaTasks style={{ fontSize: '32px', marginBottom: '12px', opacity: 0.5 }} />\n                  <p>No tasks assigned to you</p>\n                  <button className=\"add-button\">Add New Task</button>\n                </div>\n              )}\n            </div>\n          </section>\n          <section className=\"recent-activity-section\">\n            <div className=\"section-header-pro\">\n              <h3>Recent Activity</h3>\n              <button className=\"view-all-link\">View all</button>\n            </div>\n            <div className=\"recent-activity-list\">\n              {recentActivity.length > 0 ? (\n                recentActivity.map(activity => (\n                  <div key={activity.id} className=\"activity-item\">\n                    <div className=\"activity-icon\">\n                      <i className={`fas fa-${activity.type === 'login' ? 'sign-in-alt' : 'key'}`}></i>\n                    </div>\n                    <div className=\"activity-details\">\n                      <h4>{activity.description}</h4>\n                      <div className=\"activity-meta\">\n                        <span>{formatDate(activity.timestamp)}</span>\n                        <span>{activity.device}</span>\n                      </div>\n                    </div>\n                  </div>\n                ))\n              ) : (\n                <div className=\"empty-state\">No recent activity</div>\n              )}\n            </div>\n          </section>\n        </div>\n\n        <div className=\"dashboard-bottom-sections-pro\">\n          <section className=\"recent-projects-section\">\n            <div className=\"section-header-pro\">\n              <h3>Recent Projects</h3>\n              <Link to=\"/projects\" className=\"view-all-link\">View all</Link>\n            </div>\n            <div className=\"recent-projects-list\">\n              {projects.length === 0 ? (\n                <div className=\"empty-state\">\n                  <FaFolder style={{ fontSize: '32px', marginBottom: '12px', opacity: 0.5 }} />\n                  <p>No recent projects</p>\n                  <Link to=\"/projects\" className=\"add-button\">Manage Projects</Link>\n                </div>\n              ) : (\n                projects.map(project => (\n                  <div className=\"project-card\" key={project._id || project.id}>\n                    <div className=\"project-title\">{project.title}</div>\n                    <div className=\"project-description\">{project.description}</div>\n                    <div className=\"project-status\">\n                      <span className={`status-badge status-${project.status?.toLowerCase().replace(/\\s+/g, '-') || 'pending'}`}>\n                        {project.status || 'Pending'}\n                      </span>\n                    </div>\n                    <div className=\"project-actions\" style={{ marginTop: '10px', textAlign: 'right' }}>\n                      <Link to=\"/projects\" className=\"view-project-btn\">\n                        View Project\n                      </Link>\n                    </div>\n                  </div>\n                ))\n              )}\n            </div>\n            <div style={{ textAlign: 'center', marginTop: '20px' }}>\n              <Link to=\"/projects\" className=\"kanban-cta-btn\">\n                <FaTasks style={{ marginRight: '8px' }} /> Open Kanban Board\n              </Link>\n            </div>\n          </section>\n          \n          <section className=\"team-section\">\n            <div className=\"section-header-pro\">\n              <h3>Team Members</h3>\n              <button className=\"add-team-btn\">Add Member</button>\n            </div>\n            {showSuccess && (\n              <div className=\"team-success-alert\">User deleted successfully!</div>\n            )}\n            <div className=\"team-grid\">\n              {teamMembers.map(member => (\n                <div className=\"team-card\" key={member.id}>\n                  <div className=\"team-card-avatar\">\n                    {member.avatar ? (\n                      <img src={member.avatar} alt={member.name} />\n                    ) : (\n                      <span>{member.name[0]}</span>\n                    )}\n                  </div>\n                  <div className=\"team-card-info\">\n                    <div className=\"team-card-name\">{member.name}</div>\n                    <div className=\"team-card-email\">{member.email}</div>\n                    <div className=\"team-card-badges\">\n                      <span className=\"badge badge-active\">Active</span>\n                      <span className=\"badge badge-role\">Member</span>\n                    </div>\n                  </div>\n                  <div className=\"team-card-actions\">\n                    <button className=\"team-action-btn\" title=\"Edit User\"><FaUserEdit /></button>\n                    <button \n                      className=\"team-action-btn\" \n                      title=\"Delete User\"\n                      onClick={() => setShowSuccess(true)}\n                    >\n                      <FaTrash />\n                    </button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </section>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Dashboard; ","/Users/roronoazoro/Desktop/collabEase-OJT/client/src/components/Sidebar.jsx",[],[],"/Users/roronoazoro/Desktop/collabEase-OJT/client/src/components/Topbar.jsx",["88"],[],"import React, { useState } from 'react';\nimport '../styles/Topbar.css';\n\nfunction Topbar({ user, userPhoto, notifications = [], onProfile, onLogout, onSearch }) {\n  const [showProfile, setShowProfile] = useState(false);\n  const [showNotifications, setShowNotifications] = useState(false);\n\n  const handleProfileClick = () => {\n    setShowProfile(!showProfile);\n    setShowNotifications(false);\n  };\n  const handleNotificationsClick = () => {\n    setShowNotifications(!showNotifications);\n    setShowProfile(false);\n  };\n  const handleClickOutside = (event) => {\n    if (event.target.closest('.logout-btn')) return;\n    if (showProfile && !event.target.closest('.profile-container')) setShowProfile(false);\n    if (showNotifications && !event.target.closest('.notifications-container')) setShowNotifications(false);\n  };\n  React.useEffect(() => {\n    document.addEventListener('click', handleClickOutside);\n    return () => document.removeEventListener('click', handleClickOutside);\n  }, [showProfile, showNotifications]);\n\n  return (\n    <header className=\"topbar fixed-topbar\">\n      <div className=\"search-container\">\n        <input type=\"text\" className=\"search-input\" placeholder=\"Search projects, tasks, and team...\" onChange={onSearch} />\n      </div>\n      <div className=\"topbar-actions\">\n        <button className=\"icon-button\" onClick={handleNotificationsClick} title=\"Notifications\">\n          <i className=\"fas fa-bell\"></i>\n          {notifications.length > 0 && <span className=\"notification-badge\">{notifications.length}</span>}\n        </button>\n        <div className=\"profile-container\">\n          <button className=\"icon-button profile-btn\" onClick={handleProfileClick} title=\"Profile\">\n            {userPhoto ? (\n              <img src={userPhoto} alt=\"Profile\" className=\"profile-image\" />\n            ) : (\n              <span className=\"profile-initial\">{user?.name?.charAt(0) || user?.email?.charAt(0)}</span>\n            )}\n          </button>\n          {showProfile && (\n            <div className=\"profile-dropdown\">\n              <div className=\"profile-info\">\n                {userPhoto ? (\n                  <img src={userPhoto} alt=\"Profile\" className=\"profile-image-large\" />\n                ) : (\n                  <div className=\"profile-initial-large\">{user?.name?.charAt(0) || user?.email?.charAt(0)}</div>\n                )}\n                <h3>{user?.name || 'User'}</h3>\n                <p>{user?.email}</p>\n              </div>\n              <div className=\"dropdown-divider\"></div>\n              <button className=\"dropdown-link\" onClick={onProfile}>\n                <i className=\"fas fa-user\"></i>\n                View Profile\n              </button>\n              <div className=\"dropdown-divider\"></div>\n              <button className=\"dropdown-link logout-btn\" onClick={onLogout} type=\"button\">\n                <i className=\"fas fa-sign-out-alt\"></i>\n                Logout\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n    </header>\n  );\n}\n\nexport default Topbar; ",[],"/Users/roronoazoro/Desktop/collabEase-OJT/client/src/firebase.js",[],[],"/Users/roronoazoro/Desktop/collabEase-OJT/client/src/components/LogoutButton.jsx",[],[],"/Users/roronoazoro/Desktop/collabEase-OJT/client/src/pages/Profile.jsx",["89"],[],"/Users/roronoazoro/Desktop/collabEase-OJT/client/src/components/KanbanBoard.jsx",[],[],{"ruleId":"90","severity":1,"message":"91","line":2,"column":10,"nodeType":"92","messageId":"93","endLine":2,"endColumn":14},{"ruleId":"90","severity":1,"message":"91","line":2,"column":10,"nodeType":"92","messageId":"93","endLine":2,"endColumn":14},{"ruleId":"90","severity":1,"message":"94","line":6,"column":60,"nodeType":"92","messageId":"93","endLine":6,"endColumn":68},{"ruleId":"90","severity":1,"message":"95","line":24,"column":10,"nodeType":"92","messageId":"93","endLine":24,"endColumn":23},{"ruleId":"90","severity":1,"message":"96","line":5,"column":46,"nodeType":"92","messageId":"93","endLine":5,"endColumn":53},{"ruleId":"90","severity":1,"message":"97","line":7,"column":8,"nodeType":"92","messageId":"93","endLine":7,"endColumn":14},{"ruleId":"90","severity":1,"message":"98","line":13,"column":17,"nodeType":"92","messageId":"93","endLine":13,"endColumn":25},{"ruleId":"90","severity":1,"message":"99","line":14,"column":17,"nodeType":"92","messageId":"93","endLine":14,"endColumn":25},{"ruleId":"100","severity":1,"message":"101","line":205,"column":6,"nodeType":"102","endLine":205,"endColumn":38,"suggestions":"103"},{"ruleId":"100","severity":1,"message":"104","line":24,"column":6,"nodeType":"102","endLine":24,"endColumn":38,"suggestions":"105"},{"ruleId":"90","severity":1,"message":"106","line":3,"column":18,"nodeType":"92","messageId":"93","endLine":3,"endColumn":28},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'FaFilter' is defined but never used.","'notifications' is assigned a value but never used.","'FaClock' is defined but never used.","'Topbar' is defined but never used.","'setTasks' is assigned a value but never used.","'setStats' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleClickOutside'. Either include it or remove the dependency array.","ArrayExpression",["107"],"React Hook React.useEffect has a missing dependency: 'handleClickOutside'. Either include it or remove the dependency array.",["108"],"'FaEnvelope' is defined but never used.",{"desc":"109","fix":"110"},{"desc":"109","fix":"111"},"Update the dependencies array to be: [showProfile, showNotifications, handleClickOutside]",{"range":"112","text":"113"},{"range":"114","text":"113"},[6280,6312],"[showProfile, showNotifications, handleClickOutside]",[987,1019]]